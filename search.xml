<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符集和编码</title>
      <link href="2020/12/12/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/"/>
      <url>2020/12/12/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="字符集和编码"><a href="#字符集和编码" class="headerlink" title="字符集和编码"></a>字符集和编码</h2><p>开始阅读之前先自问一下：</p><ul><li>什么是Unicode？</li><li>什么是UTF-8？</li><li>它俩之间是什么关系？</li></ul><p>如果可以果断地回答出上面地问题。那么遗憾地告诉你，这篇文章对你毫无用处。。。。。。</p><p>不皮了，步入正题，之所以写这篇博客，完全是处于自己之前对上面地问题处于完全懵逼状态，因此搜集资料想搞明白它，结果发现网上的资料良莠不齐，很多人把Unicode和UTF-8混为一谈，所以记录一下我通过搜集资料整理的对字符集和编码的理解，希望能对看到这篇博客的你们有一点帮助。</p><h3 id="字符、码点、字符集、编码方式"><a href="#字符、码点、字符集、编码方式" class="headerlink" title="字符、码点、字符集、编码方式"></a>字符、码点、字符集、编码方式</h3><p>开始之前需要先理清这三个概念：</p><ul><li><p><strong>字符(Character)：</strong>就是我们人类用于交流，描述信息的一些文字符号，比如中国的汉字，英文中的26个字母A~Z等等一些符号。</p></li><li><p><strong>码点(Code Point)：</strong>计算机只能存储数字，无法直接存储<strong>字符</strong>，所以用一个个的数字来表示对应<strong>字符</strong>，这些表示<strong>字符</strong>的数字就叫做<strong>码点</strong>。</p></li><li><p><strong>字符集：</strong>字符和码点间的映射表，规定了字符和码点的映射关系，计算机只能存储码点，所以计算机就是拿到码点，通过查询字符集来显示对应的字符，当然计算机显示一个字符的完整过程要复杂的多。</p><p>常见的字符集有：</p><ul><li><p>ASCII码：包括26个大写字母、26个小写字母、数字0-9、各种制表符、特殊符号、换行等控制字符，总共127个字符。使用0~127来表示，由于ASCII码是由计算机起源国家美国最先发明的，所以之照顾到了英文，无法表示中文，但是所有的编码集都会兼容ASCII码。<a href="https://bk.tw.lvfukeji.com/wiki/ASCII%E7%A0%81">了解更多</a></p></li><li><p>Unicode：汇集了全世界的各种字符的编码方式。Unicode的字符的数量非常大，因此划分成了各个片区，按片区去分配，最终形成一个Unicode的庞大的编码集。Unicode共有17个片区，整个空间大小是2<sup>21</sup>，根据Unicode最新13.0.0版标准，Unicode共规定了143,859个字符，Unicode 的码点通常用 U+????来表示，其中????是十六进制的码点值。<a href="https://unicode.org/versions/Unicode13.0.0/">了解更多</a></p><p>0~65536(U+0000 ~ U+FFFF)的码点被称为基本字符区域(缩写BMP)，所有最常见的字符都放在这个片区，这是 Unicode 最先定义和公布的一个片区，剩下的字符都放在辅助片区（缩写 SMP，共 16 个辅助片区），码点范围 U+010000 - U+10FFFF。</p></li><li><p>UCS：Unicode 与另一个标准化组织发生合并的时候，产生了一个叫 UCS 的这样的一个字符集，是 0000~FFFF 这个范围的字符集</p></li><li><p>GB(国标版本)：国标编码有一个特点就是与 Unicode 的字符集的码点不一致，</p><ul><li>GB2312：国标字符集的第一个版本，也是非常广泛使用的一个版本</li><li>GBK(GB13000)</li><li>GB18030</li></ul></li><li><p>ISO-8859: 与国标类似，收录了欧洲那边常用的字符的字符集</p></li><li><p>BIG5：大五码，台湾通常使用这种编码方式</p></li></ul></li><li><p><strong>编码方式(Ecoding)：</strong>计算机存储的是码点，我们知道计算机存储的基本单位是字节（8bit），而世界上的字符太多，所以码点的大小就有可能超出一个字节，所以就需要规范一下对码点的存储，这就是<strong>编码方式</strong>，<strong>编码方式</strong>规定了一个码点应该存几个字节。</p><p>常见的编码方式：</p><ul><li>UTF-8</li><li>UTF-16</li><li>……</li></ul></li></ul><p>理解了上面的四个概念，就能回答上面的三个问题了，其实Unicode是一个字符集，而UTF-8是Unicode使用的一种编码方式之一。由于UTF-8是最常用的编码方式，下面着重介绍一下UTF-8。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p> UTF8 是 Unicode 字符集的一种编码方式之一，UTF8 是一种变长字节编码方式，UTF8 的编码方式与 ASCII 字符集中字符的编码方式是兼容的。</p><p><strong>编码规则如下：</strong></p><ol><li><p>对于单字节的符号，字节的第一位设为<code>0</code>，后面 7 位为这个符号的 Unicode 码。因此对于英文字母，UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于<code>n</code>字节的符号（<code>n&gt;1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n+1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩余未填充位，从后向前依次填充字符的二进制码点，多出的位补0。</p><table><thead><tr><th>Unicode符号范围(十六进制)</th><th>UTF-8编码方式(二进制)</th></tr></thead><tbody><tr><td>0000 0000 - 0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0000 0080 - 0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0000 0800 - 0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0001 0000 - 0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p><strong>根据上表，如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节。</strong></p></li><li><p><strong>举例</strong>：以汉字<code>一</code>为例，<code>一</code>的 Unicode 是<code>4E00</code>(二进制：100111000000000)，根据上表可知汉字<code>一</code>的码点，处在第三行的范围（0000 0800 - 0000 FFFF），所以使用 UTF8 对汉字<code>一</code>进行编码需要三个字节，格式为：<code>1110xxxx 10xxxxxx 10xxxxxx</code>，接下来从<code>一</code>的而进制（100111000000000）的最后一位开始依次从后向前填充 x 的位置，多出的位补 0，最后得出汉字<code>一</code>的 UTF8 编码是<code>11100100 10111000 10000000</code></p></li></ol><h3 id="用js代码实现UTF-8的编码"><a href="#用js代码实现UTF-8的编码" class="headerlink" title="用js代码实现UTF-8的编码"></a>用js代码实现UTF-8的编码</h3><p>基于上面的UTF-8的编码规则，使用js代码进行实现：</p><ul><li>输入：字符串</li><li>输出：字符串每个字符经过UTF-8编码后得出的二进制数字构成的数组</li></ul><p>代码如下:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">utf8_encoding</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">unicode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> bin <span class="token operator">=</span> unicode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>unicode <span class="token operator">>=</span> <span class="token number">0x00</span> <span class="token operator">&amp;&amp;</span> unicode <span class="token operator">&lt;=</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bin<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>unicode <span class="token operator">>=</span> <span class="token number">0x80</span> <span class="token operator">&amp;&amp;</span> unicode <span class="token operator">&lt;=</span> <span class="token number">0x7ff</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">toUtf8Encode</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>unicode <span class="token operator">>=</span> <span class="token number">0x800</span> <span class="token operator">&amp;&amp;</span> unicode <span class="token operator">&lt;=</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">toUtf8Encode</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>unicode <span class="token operator">>=</span> <span class="token number">0x10000</span> <span class="token operator">&amp;&amp;</span> unicode <span class="token operator">&lt;=</span> <span class="token number">0x10ffff</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">toUtf8Encode</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">/*  为了好理解写成上面的样子，上面的if-else可以缩减成下面这样：  if(unicode >= 0x00 &amp;&amp; unicode &lt;= 0x7f)&#123;  return bin.padStart(8, '0');  &#125; else if (unicode >=0x80 &amp;&amp; unicode &lt;= 0x10ffff)&#123;  return toUtf8Encode(bin);  &#125;  */</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">toUtf8Encode</span><span class="token punctuation">(</span><span class="token parameter">bin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> headStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> strArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> bin<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        strArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>bin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strArr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            headStr <span class="token operator">+=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> headStr <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token operator">+</span> strArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> headStr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token operator">+</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">utf8_encoding</span><span class="token punctuation">(</span><span class="token string">"ࠀࠁࠂ"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>参考源：</p><p>UTF-8标准：<a href="https://tools.ietf.org/html/rfc3629#page-4">https://tools.ietf.org/html/rfc3629#page-4</a></p><p>Unicode标准：<a href="https://unicode.org/versions/Unicode13.0.0/">https://unicode.org/versions/Unicode13.0.0/</a></p><p>极客时间winner老师专栏：重学前端</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript数据类型与值（一）</title>
      <link href="2020/12/11/ECMAScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC/"/>
      <url>2020/12/11/ECMAScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p><strong>以下内容基于Draft ECMA-262 / December 7, 2020阶段的标准以及网上搜集整理的资料。</strong></p><h2 id="ECMAScript类型"><a href="#ECMAScript类型" class="headerlink" title="ECMAScript类型"></a>ECMAScript类型</h2><p>ECMAScript数据类型包括：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>String</code>、<code>Number</code>、<code>Symbol</code>、<code>BigInt</code>、<code>Object</code>。</p><h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a><strong>Undefined</strong> 类型</h3><p><code>Undefined</code>类型只有一个值，就是<strong>undefined</strong>，任何一个没有赋过值的变量的默认值都是 <strong>undefined</strong>。<strong>undefined</strong>是一个全局的变量，早期的JavaScript版本可以为它重新赋值，现在只能在函数里面局部地去定义Undefined的值：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre><p>一般用<code>void 0;</code>来产生undefined，因为void运算符是个关键字，void后面不管跟什么，都会变成undefined这个值，所以在语法上最简洁地得到undefined的值的方法就是使用这个void关键字来进行一次运算。</p><p>undefined不是一个关键字。</p><h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a><strong>Null</strong> 类型</h3><p><code>Null</code>类型只有一个值，就是<strong>null</strong>。</p><p>null是一个关键字</p><h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a><strong>Boolean</strong> 类型</h3><p><code>Boolean</code>类型表示具有两个值的逻辑实体，分别为<strong>true</strong>和<strong>false</strong>。</p><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a><strong>String</strong> 类型</h3><p>一个字符串是由0个或多个字符组成，若理解字符串，先理解字符是什么？首先，计算机并不认识每个字符的图形符号，计算机只能存储二进制数字。那么若想存储图形符号怎么办呢？这就不得不提<strong>字符集</strong>了。</p><p>既然计算机只能存储二进制数字，那么就用特定的数字表示特定的图形符号。于是乎，数字与图形符号的映射关系诞生了，这个东西就叫<strong>字符集</strong>。其中与每个图形符号对应的数字也叫<strong>码点(Code Point)**（起个高大上的名字显得专业）。图形符号就是</strong>字符(Character)<strong>。这会儿我们应该知道了，计算机实际存储的并不是一个个的字符，而是这一个个字符对应的</strong>码点<strong>。由于计算机存储的基本单位是字节（8bit），而</strong>码点<strong>的大小有可能超出一个字节，为了解决这个问题，</strong>编码方式(Encoding)<strong>出现了。</strong>编码方式**规定了计算机如何存储码点。</p><p><a href="">了解更多字符集相关的内容</a></p><p>ECMAScript采用的是UTF16编码，即把每个UTF16单元当作一个字符来处理，我们用来操作字符串的一些方法如charAt、charCodeAt、length等都是针对UTF16编码实现的，在处理BMP字符时，是正常的，但是在处理非BMP字符时就会出现问题。不过好在ES6对应的可以处理非BMP字符的方法，如fromCodePoint、codePointAt。</p><p>一个字符串的最大长度为2<sup>52</sup>-1，注意这里的最大长度并不是所谓的字符数，实际上是受字符串的编码长度影响的，这是由于不同的编码方式，存储一个字符所占的内存空间不同。</p><p>字符串可以看做是由字符构成的有序序列集合，每个字符都在这个序列中占据一个位置。这些位置用非负整数作索引，从索引0开始，以自然数排序直到字符串结束位置，例如：长度为5的字符串，第一个字符索引就是0，第二个是1，以此类推直到最后一位的索引是4。</p><h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p><strong>Number</strong>类型在JavaScript中有18437736874454810627(即 2<sup>64</sup>-2<sup>53</sup>+3)个值。基本复合IEEE754-2019规定的64位双精度浮点数的规则。除了IEEE标准的9,007,199,254,740,990(即2<sup>53</sup> - 2)在ECMAScript中表示为单个特殊的<strong>NaN</strong>值之外。</p><p>除了<strong>NaN</strong>外还有两个特殊的值，分别是**+Infinity(正无穷)大<strong>和</strong>-Infinity(负无穷大)**</p><p>其他的18,437,736,874,454,810,624(即2<sup>64</sup> - 2<sup>53</sup>)个值称为有限数。一半是正数，一半是负数;对于每一个有限的正数值，都有一个相应的具有相同大小的负值。</p><p>根据双精度浮点数的定义，Number类型中有效的整数范围是-0x1fffffffffffff 至 0x1fffffffffffff，所以Number无法精确表示此范围外的整数。</p><p>同样的根据浮点数的定义，非整数的Number类型无法用==或===来比较。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">//false</span></code></pre><p>这里输出的结果是 false，说明两边不相等的，这是浮点运算的特点，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。正确的比较方法是使用JavaScript提供的最小精度值：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre><p>检查等式左右两边差的绝对值是否小于最小精度，才是正确的比较浮点数的方法。这段代码结果就是 true 了。</p><p>所有绝对值不大于2<sup>53</sup>的正整数和负整数都可以用Number类型来表示。而且整数0也有+0(可以省略+号)和-0的表示方式。他们在加减法类的运算中没有区别，但是在除法中需要注意，当除数为-0时得到的是**-Infinity<strong>，当除数是+0时得到的是</strong>+Infinity**。</p><p><a href="">双精度浮点类型的表示原理</a></p><p><strong>注意：</strong></p><p><strong>Number</strong>类型的表示方式分为以下四种：</p><ul><li><p><strong>十六进制(HexIntegerLiteral)</strong></p><pre class="language-none"><code class="language-none">0xFF</code></pre></li><li><p><strong>十进制(DecimalLiteral)</strong></p><pre class="language-none"><code class="language-none">11.11..11e2</code></pre></li><li><p><strong>八进制(OctalIntegerLiteral)</strong></p><pre class="language-none"><code class="language-none">0o17</code></pre></li><li><p><strong>二进制(BinaryIntegerLiteral)</strong></p><pre class="language-none"><code class="language-none">0b101</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
